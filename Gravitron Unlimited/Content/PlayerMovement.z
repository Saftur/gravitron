// Name: Charles
// Date: 2/2/17
// All content Â© 2017 DigiPen (USA) Corporation, all rights reserved.

class PlayerMovement : ZilchComponent
{
    var MaxMoveSpeed : Real = 0;
    var CeilingDistance : Real = 0;
    var CrawlOffset : Real3 = Real3(0, -0.25, 0);
    
    var Grabbox : Cog = null;    //For holding items
    var Displacement : Real3 = Real3(1.5,0,0);
    
    var Controls : Input;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.MaxMoveSpeed = this.Owner.SweptController.MaxMoveSpeed;
        this.Grabbox = this.Space.FindObjectByName("Grabbox");
        this.Controls = new Input();
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Owner.PlayerHealth.Health <= 0)
        {
            return;
        }
        var movement = Real3(0,0,0);
        
        //Jumping
        if(this.Controls.KeyPressed(2))
        {
            this.Owner.SweptController.Jump();
        }
        if(this.Controls.KeyReleased(2))
        {
            this.Owner.SweptController.JumpCancel();
        }
        
        //Crawling
        if(this.Controls.KeyPressed(3) && this.Owner.SweptController.Grounded)
        {
            this.Owner.SweptController.MaxMoveSpeed = 5;        //Crawling Speed
            //Crawling Sprite
            this.Owner.Sprite.Color = Real4(1,0,0,1);
            this.Owner.BoxCollider.Size = Real3(2, 0.5, 1);
            this.Owner.BoxCollider.Offset = this.CrawlOffset;
        }
        if(this.Controls.KeyReleased(3))
        {
            this.Owner.SweptController.MaxMoveSpeed = this.MaxMoveSpeed;
            //Walking Sprite
            this.Owner.Sprite.Color = Real4(1,1,1,1);
            this.Owner.BoxCollider.Size = Real3(1, 1, 1);
            this.Owner.BoxCollider.Offset = Real3(0, 0, 0);
        }
        
        //Left Right movement
        
        if(this.Controls.Pad.LeftStick.X != 0)
        {
            movement.X += this.Controls.Pad.LeftStick.X;
        }
        else
        {
            if(this.Controls.KeyDown(0))
            {
                movement.X += -1;
                this.Displacement = Real3(-1.5, 0, 0);
                this.Grabbox.FollowObject.Displacement = Real3(-0.3, 0, -0.1);
                if(this.Grabbox.PlayerInteraction.CurrentItem != null)
                {
                    this.Grabbox.PlayerInteraction.CurrentItem.FollowObject.Displacement = this.Displacement;
                }
            }
            if(this.Controls.KeyDown(1))
            {
                movement.X += 1;
                this.Displacement = Real3(1.5, 0, 0);
                this.Grabbox.FollowObject.Displacement = Real3(0.3, 0, -0.1);
                if(this.Grabbox.PlayerInteraction.CurrentItem != null)
                {
                    this.Grabbox.PlayerInteraction.CurrentItem.FollowObject.Displacement = this.Displacement;
                }
            }
        }
        
        this.Owner.SweptController.Update(movement, event.Dt);
    }
}

class Input
{
    var Keys : Array[Array[Integer]];
    var IsKey : Array[Array[Boolean]];
    
    var Pad : Gamepad;
    
    constructor()
    {
        this.Pad = Zero.Gamepads.GetGamePad(0);
        this.Keys = new Array[Array[Integer]]();
        this.IsKey = new Array[Array[Boolean]]();
        for (var i=0; i<4; i+=1) {
            this.Keys.Add(new Array[Integer]());
            this.IsKey.Add(new Array[Boolean]());
        }
        // Left keys
        this.AddKey(0, Keys.Left, true);
        this.AddKey(0, Keys.A, true);
        this.AddKey(0, Buttons.DpadLeft, false);
        // Right keys
        this.AddKey(1, Keys.Right, true);
        this.AddKey(1, Keys.D, true);
        this.AddKey(1, Buttons.DpadRight, false);
        // Jump keys
        this.AddKey(2, Keys.Up, true);
        this.AddKey(2, Keys.W, true);
        this.AddKey(2, Buttons.A, false);
        this.AddKey(2, Buttons.DpadUp, false);
        // Crawl keys
        this.AddKey(3, Keys.Down, true);
        this.AddKey(3, Keys.S, true);
        this.AddKey(3, Buttons.DpadDown, false);
        this.AddKey(3, Buttons.RightShoulder, false);
    }
    
    function AddKey(control : Integer, key : Integer, isKey : Boolean)
    {
        this.Keys[control].Add(key);
        this.IsKey[control].Add(isKey);
    }
    
    function KeyDown(key : Integer) : Boolean
    {
        for (var i=0; i<this.IsKey[key].Count; i+=1) {
            if (this.IsKey[key][i]) {
                if (Zero.Keyboard.KeyIsDown(this.Keys[key][i] as Keys))
                    return true;
            } else if (this.Pad.IsActive) {
                if (this.Pad.IsButtonHeld(this.Keys[key][i]))
                    return true;
            }
        }
        return false;
    }
    
    function KeyPressed(key : Integer) : Boolean
    {
        for (var i=0; i<this.IsKey[key].Count; i+=1) {
            if (this.IsKey[key][i]) {
                if (Zero.Keyboard.KeyIsPressed(this.Keys[key][i] as Keys))
                    return true;
            } else if (this.Pad.IsActive) {
                if (this.Pad.IsButtonPressed(this.Keys[key][i]))
                    return true;
            }
        }
        return false;
    }
    
    function KeyReleased(key : Integer) : Boolean
    {
        for (var i=0; i<this.IsKey[key].Count; i+=1) {
            if (this.IsKey[key][i]) {
                if (Zero.Keyboard.KeyIsReleased(this.Keys[key][i] as Keys))
                    return true;
            } else if (this.Pad.IsActive) {
                if (this.Pad.IsButtonReleased(this.Keys[key][i]))
                    return true;
            }
        }
        return false;
    }
    
    
    function SwitchPad(num : Integer) {
        if (Zero.Gamepads.GetGamePad(num).IsActive)
            this.Pad = Zero.Gamepads.GetGamePad(num);
    }
    
    function PadActive() : Boolean {
        return this.Pad.IsActive;
    }
}